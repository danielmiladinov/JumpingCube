/**
 * JumpingCubePlayerDialog.java
 * @author Daniel Miladinov
 * @version 1-beta
 */

import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import javax.swing.border.*;

/**
 * The JumpingCubePlayerDialog class exists as a graphical interface to
 * the player being able to manipulate the aspects of their game presence.
 * As of version 1-beta, the only options the player can change are the 
 * player name and color. 
 */
public class JumpingCubePlayerDialog extends JDialog implements ActionListener
{
	private JTextField nameText;
	private JButton nameResetBtn;
	private JButton colorResetBtn;
	private JButton closeButton;
	private JButton defaultsButton;
	private JumpingCubePlayer player;
	private JButton jcBtn;
	private String playerName;
	private JumpingCube owner;

	private int playerNumber;

	/**
	 * The JumpingCubePlayerDialog constructor.
	 * @param player A reference to the JumpingCubePlayer to be edited.
	 * @param owner A reference to the JumpingCube window that owns this dialog.
	 * @param playerNumber Whether this dialog is for Player 1 or Player 2.  1 for Player 1, and 2 for Player 2.
	 */
	public JumpingCubePlayerDialog(JumpingCubePlayer player, JumpingCube owner, int playerNumber)
	{
		super(owner, "Player Attributes", true);
		this.owner = owner;
		this.player = player;
		this.playerName = player.getName();
		this.playerNumber = playerNumber;

		setDefaultCloseOperation(JDialog.DO_NOTHING_ON_CLOSE);
		
		JPanel containerPanel = new JPanel();
		containerPanel.setBorder(BorderFactory.createEmptyBorder(0, 5, 5, 5));
		containerPanel.setLayout(new BoxLayout(containerPanel, BoxLayout.X_AXIS));

		TitledBorder nameTitle = BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), "Name");
		TitledBorder colorTitle = BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), "Color");
		Border etched = BorderFactory.createEtchedBorder();
		
		JPanel namePanel = new JPanel();
		namePanel.setBorder(nameTitle);
		nameText = new JTextField(10);
		nameText.setText(player.getName());
		namePanel.add(nameText);
		JPanel btnPanel = new JPanel();
		nameResetBtn = new JButton("Reset");
		nameResetBtn.addActionListener(this);
		btnPanel.add(nameResetBtn);

		namePanel.add(btnPanel);

		JPanel colorPanel = new JPanel();
		colorPanel.setLayout(new FlowLayout());
		colorPanel.setBorder(colorTitle);
		jcBtn = new JButton(JumpingCubeButton.TWO_POINTS);
		jcBtn.addActionListener(this);
		jcBtn.setBackground(player.getColor());
		colorResetBtn = new JButton("Reset");
		colorResetBtn.addActionListener(this);
		colorPanel.add(jcBtn);
		colorPanel.add(colorResetBtn);

		JPanel dialogPanel = new JPanel();
		closeButton = new JButton("Close This Window");
		closeButton.addActionListener(this);

		defaultsButton = new JButton("Reset To Defaults");
		defaultsButton.addActionListener(this);

		dialogPanel.add(closeButton);
		dialogPanel.add(defaultsButton);
		dialogPanel.setBorder(etched);

		containerPanel.add(namePanel);
		containerPanel.add(colorPanel);
		
		getContentPane().add(containerPanel, BorderLayout.CENTER);
		getContentPane().add(dialogPanel, BorderLayout.SOUTH);

		setSize(425, 150);
		
		int optimumX = (owner.getWidth() / 2) + (owner.getX());
		int optimumY = (owner.getHeight() /2) + (owner.getY());

		optimumX -= this.getWidth() / 2;
		optimumY -= this.getHeight() / 2;

		setLocation(optimumX, optimumY);
		show();
	}

	/* Uncomment this method to test this dialog as a standalone application
	public static void main(String args[])
	{
		JumpingCubePlayer testPlayer = new JumpingCubePlayer("Player 1", Color.red);

		new JumpingCubePlayerDialog(testPlayer, null, 1).addWindowListener(
				new WindowAdapter()
				{
					public void windowClosing(WindowEvent e)
					{
						System.exit(0);
					}
				}
				);
	}
	*/

	/**
	 * As a fulfillment of its ActionListener interface contract,
	 * the JumpingCubePlayerDialog responds to ActionEvents generated
	 * by its buttons with this method.
	 * @param ae An ActionEvent generated by the system when a button is clicked.
	 */
	public void actionPerformed(ActionEvent ae)
	{
		if(ae.getSource().equals(closeButton))
		{
			int choice = 
			JOptionPane.showConfirmDialog(this,
					"Save the current settings?",
					"Saving Player Settings",
					JOptionPane.YES_NO_CANCEL_OPTION);

			if(choice == JOptionPane.YES_OPTION)
			{ 
				player.setName(this.nameText.getText()); 
				player.setColor(this.jcBtn.getBackground());
				this.setVisible(false);
			}
			else if(choice == JOptionPane.NO_OPTION)
			{
				this.setVisible(false);
			}
			else
			{
				return;
			}
		}

		if(ae.getSource().equals(defaultsButton))
		{
			if(playerNumber == 1)
			{
				this.nameText.setText("Player 1");
				this.jcBtn.setBackground(Color.red);
			}
			else if(playerNumber == 2)
			{
				this.nameText.setText("Player 2");
				this.jcBtn.setBackground(Color.blue);
			}
			return;
		}

		if(ae.getSource().equals(nameResetBtn))
		{
			this.nameText.setText(playerName);
		}

		if(ae.getSource().equals(jcBtn))
		{
			Color newColor = jcBtn.getBackground();
			newColor = JColorChooser.showDialog(JumpingCubePlayerDialog.this, "Choose a Color", newColor);
			if(newColor != null)
			{
				jcBtn.setBackground(newColor);
			}
		}

		if(ae.getSource().equals(colorResetBtn))
		{
			jcBtn.setBackground(player.getColor());
		}
	}
}
